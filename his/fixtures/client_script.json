[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-09-06 13:44:30.287672",
  "module": "HIS",
  "name": "Sales Order",
  "script": "frappe.ui.form.on('Sales Order', {\n\trefresh(frm) {\n\t    \nif (!frm.is_new() && !frm.doc.total_with_vat ) {\n    frappe.db.set_value(\"Sales Order\", frm.doc.name, { \"total_with_vat\": (frm.doc.grand_total * 1.05)});\n}\n// \tif(flt(frm.doc.per_billed, 6) < 100) {\n\t\t\tfrm.add_custom_button(__('Cash Sales'), () => make_sales_invoice(frm));\n\t\t\t\tfrm.add_custom_button(__('Credit Sales'), () => make_credit_invoice(frm));\n// \t\t}\n\t},\n\t\t   \n\npatient:function(frm){  \n    if(frm.is_new()){\n\t       //frm.set_value(\"total_with_vat\", (frm.doc.grand_total * 1.05))\n\t       //console.log(frm.doc.patient_name)\n    }\n\t         \n}\n\t    \n})\n\nvar make_sales_invoice =  function(frm) {\n\t\tfrappe.model.open_mapped_doc({\n\t\t\tmethod: \"his.api.make_invoice.make_sales_invoice\",\n\t\t\tfrm: frm\n\t\t})\n\t}\n\t\n\tvar make_credit_invoice =  function(frm) {\n\t\tfrappe.model.open_mapped_doc({\n\t\t\tmethod: \"his.api.make_invoice.make_credit_invoice\",\n\t\t\tfrm: frm\n\t\t})\n\t}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-09-06 13:44:31.053857",
  "module": "HIS",
  "name": "Sales Order List",
  "script": "frappe.listview_settings['Sales Order'] = {\n    // filters: [\n    //     ['Status', '=', \"Admitted\"]\n    // ],\n    colwidths: {\"customer_name\": 10},\n    filters:[[\"status\",\"!=\", \"To Deliver and Bill\"]],\n  \n     get_indicator(doc) {\n        // customize indicator color\n        if (doc.status == \"To Deliver and Bill\") {\n            \n            return [__(\"To Bill\"), \"red\" , \"Document Status =To Deliver and Bill \"];\n        }\n        if(doc.status = \"Submitted\"){\n            \n              return [__(\"Compeleted\"), \"green\" , \"Document Status =To Deliver and Bill \"];\n        }\n    },\n     hide_name_column: true,\n\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2025-09-06 13:44:29.798436",
  "module": "HIS",
  "name": "Encounter",
  "script": "frappe.ui.form.on('Patient Encounter', {\n\trefresh(frm) {\n\t    \n\t    \t\n        frm.set_query('procedure', 'procedure_prescription', function() {\n            return {\n                // query: \"his.api.dp_drug_pr_link_query.my_custom_query\",\n                filters: {\n                    'medical_department': frm.doc.medical_departments\n                }\n                \n            };\n        })\n   \n            frm.set_query('service', 'services_prescription', function() {\n            return {\n                filters: frm.doc.medical_departments ? { 'department': frm.doc.medical_departments } : {}\n            };\n        });\n     frm.set_query('package', 'packages_prescription', function() {\n            return {\n                filters: frm.doc.medical_departments ? { 'medical_department': frm.doc.medical_departments } : {}\n            };\n        });\n\t   frm.add_custom_button('Open History', () => {\n            if(frm.doc.patient){\n            frappe.call({\n\t\t\t\tmethod: \"his.api.p_history.get_history\", //dotted path to server method\n\t\t\t\targs : {\"patient\" : frm.doc.patient},\n\t\t\t\t//  args : {\"load_a\" : currdate , to_date : to_date},\n\t\t\t\tcallback: function(r) {\n\t\t\t\t\n\t\t\t\t\tvar x = window.open();\n\t\t\t\t\tx.document.open().write(r.message);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\n\t\t\t\t}})\n            }\n          });\n\t    \n\t    frm.add_custom_button('Open Opthalmology History', () => {\n            if(frm.doc.patient){\n            frappe.call({\n\t\t\t\tmethod: \"his.dashboard_and_history.opthalmology_history.get_history\", //dotted path to server method\n\t\t\t\targs : {\"patient\" : frm.doc.patient, \"doc\": frm.doc.name},\n\t\t\t\t//  args : {\"load_a\" : currdate , to_date : to_date},\n\t\t\t\tcallback: function(r) {\n\t\t\t\t\n\t\t\t\t\tvar x = window.open();\n\t\t\t\t\tx.document.open().write(r.message);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\n\t\t\t\t}})\n            }\n          });   \n\t    \n\t frm.set_query('optical_code', 'optical_prescription', function() {\n            return {\n                // query: \"his.api.dp_drug_pr_link_query.my_custom_query\",\n                filters: {\n                    \"item_group\": \"Optical\",\n                }\n                \n            };\n        })\n     frm.set_query('drug_code', 'drug_prescription', function() {\n            return {\n                // query: \"his.api.dp_drug_pr_link_query.my_custom_query\",\n                filters: {\n                    \"item_group\": \"Drug\"\n                }\n                \n            };\n        })\n\t\t\t\n\t\t\t\n    \t\tif (frm.is_new()){\n\t   \n\t    let data= [\"DV\", \"ADD\"]\n\t    data.forEach( (va , ind) => {\n\t    var right = frm.add_child('right_eye');\n                right.name1 = va;\n                \n        var left = frm.add_child('left_eye');\n                left.name1 = va;\n                // if (ind==1){\n                //     // frm.set_df_property(\"\")\n                // }\n                frm.refresh_field('left_eye');\n                frm.refresh_field('right_eye');\n                // console.log(va)\n\t    })\n\t}\n\t\n    if (!frm.is_new()) {\n\t\t\n        frm.add_custom_button(__('Print Medication'), function(){\n            var url=`${frappe.urllib.get_base_url()}/printview?doctype=Patient%20Encounter&name=${frm.doc.name}&trigger_print=1&format=Medication%20Prescription&no_letterhead=0&letterhead=Logo&settings=%7B%7D&_lang=en-US`\n            window.open(url, '_blank');\n        }, __(\"Print\"));\n        frm.add_custom_button(__('Print Lab'), function(){\n            var url=`${frappe.urllib.get_base_url()}/printview?doctype=Patient%20Encounter&name=${frm.doc.name}&trigger_print=1&format=Lab%20Prescription&no_letterhead=0&letterhead=Logo&settings=%7B%7D&_lang=en-US`\n            window.open(url, '_blank');\n        }, __(\"Print\"));\n        frm.add_custom_button(__('Print Procedure'), function(){\n            var url=`${frappe.urllib.get_base_url()}/printview?doctype=Patient%20Encounter&name=${frm.doc.name}&trigger_print=1&format=Procedure%20Prescription&no_letterhead=0&letterhead=Logo&settings=%7B%7D&_lang=en-US`\n            window.open(url, '_blank');\n        }, __(\"Print\"));\n\n        frm.add_custom_button(__('Print Radiology'), function(){\n            var url=`${frappe.urllib.get_base_url()}/printview?doctype=Patient%20Encounter&name=${frm.doc.name}&trigger_print=1&format=Radiology%20Prescription&no_letterhead=0&letterhead=Logo&settings=%7B%7D&_lang=en-US`\n            window.open(url, '_blank');\n        }, __(\"Print\"));\n        \n          frm.add_custom_button(__('Print Services'), function(){\n            var url=`${frappe.urllib.get_base_url()}/printview?doctype=Patient%20Encounter&name=${frm.doc.name}&trigger_print=1&format=Services%20Prescription&no_letterhead=0&letterhead=Logo&settings=%7B%7D&_lang=en-US`\n            window.open(url, '_blank');\n        }, __(\"Print\"));\n    }\n    \n    \n     \n\t},\n\t\tadd_vital_sign:function(frm){\n\t    \n\t   // frm.new_doc(\"\")\n\t     frappe.new_doc(\"Vital Signs\",{\"patient\": frm.doc.patient, }) \n\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-09-06 13:44:30.048283",
  "module": "HIS",
  "name": "Sales Invoice",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    before_cancel : function (frm){\n        \n    if (frm.doc.so_type==\"Cashiers\" && frappe.session.user != \"saciidbariise@jazeerahospital.com\"  && frappe.session.user != \"mustaf@jazeera.so\"  && frappe.session.user != \"Administrator\") {\n\t frappe.throw(__('Please Return instead of Cancel!!!!'))\n\t}\n    },\n\trefresh(frm) {\n\t    \n\t    \tfrm.set_query(\"employee\", function() {\n        return {\n            \"filters\": {\n               allow_to_bill: 1\n            }\n        };\n\t    \t});\n\tfrm.set_query(\"insurance\", function() {\n        return {\n            \"filters\": {\n               customer_group: [\"in\", [\"Insurance\", \"Sponsor\"]]\n            }\n        };\n    });\n    if(frm.doc.so_type === \"Cashiers\"){\n     frm.set_query('item_code', 'items', function() {\n            return {\n                // query: \"his.api.dp_drug_pr_link_query.my_custom_query\",\n                filters: {\n                    'is_stock_item': 0\n                }\n                \n            };\n        })\n\t}\n    \n    \tfrm.set_query(\"bill_to_patient\", function() {\n        return {\n            \"filters\": {\n                \"inpatient_status\": \"Admitted\"\n            }\n        };\n    });\n    \n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Daily Closing",
  "enabled": 1,
  "modified": "2025-09-06 13:44:30.549773",
  "module": "HIS",
  "name": "Daily Closing Total",
  "script": "frappe.ui.form.on('Daily Closing', {\n\trefresh(frm) {\n\t    if(frm.is_new()){\n\t\tcalculateTotalUnits(frm);\n\t\tcalculateTotalcomission(frm);\n\t    }\n\t},\n\tonload: function(frm){\n\t    if(frm.is_new()){\n\t        \n\t   \n\t   frappe.call({\n            method: 'his.his.doctype.daily_closing.daily_closing.get_balance',\n            callback: function(r) {\n                // console.log(r.message)\n                frm.set_value(\"account\", r.message[1])\n                frm.set_value(\"balance\", r.message[0])\n                // if (!r.exc) {\n                //     // code snippet\n                // }\n            }\n        });\n        \n        \n        // get total Commission by user\n        frappe.call({\n            method: 'his.his.doctype.daily_closing.daily_closing.get_comm',\n            callback: function(r) {\n                console.log(r.message)\n                \n                frm.set_value(\"c_balance\", r.message)\n                // if (!r.exc) {\n                //     // code snippet\n                // }\n            }\n        });\n\t    }\n\t}\n\n})\n\nfrappe.ui.form.on('Cashiers Account Entery', {\n\t amount: function(frm, cdt, cdn) {\n    //  alert(\"why are you not working.\")\n        // Recalculate total units sum whenever units field changes\n        calculateTotalUnits(frm);\n    }\n})\n\nfunction calculateTotalUnits(frm) {\n    var total_units = 0;\n    frm.doc.accounts.forEach(function(row) {\n        total_units += row.amount;\n    });\n\n    // Set the total sum in the field you want to update\n    frm.set_value('total', total_units);\n    \n   frm.set_value('difference', frm.doc.total -frm.doc.balance  );\n     \n    \n\n}\n\nfrappe.ui.form.on('Commission Detail', {\n\t amount: function(frm, cdt, cdn) {\n    //  alert(\"why are you not working.\")\n        // Recalculate total units sum whenever units field changes\n        calculateTotalcomission(frm);\n    }\n})\n\nfunction calculateTotalcomission(frm) {\n    var total_units = 0;\n    frm.doc.commissions.forEach(function(row) {\n        total_units += row.amount;\n    });\n\n    // Set the total sum in the field you want to update\n    frm.set_value('c_total', total_units);\n    \n//   frm.set_value('difference', frm.doc.c_balance - frm.doc.total);\n     \n    \n\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-09-06 13:44:29.665413",
  "module": "HIS",
  "name": "Sales in",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\tif (frm.doc.docstatus !== 1 && frm.doc.docstatus !== 2 && frm.doc.total_and__vat != frm.doc.grand_total * 1.05) {\n    frm.set_value(\"total_and__vat\", frm.doc.grand_total * 1.05);\n    // frm.save()\n}\n\t\t\n\t\t\t\n\t\t\n\t\t const baseUrl = `${window.location.protocol}//${window.location.host}`;\n\t\t\tif(!frm.is_new()){\n\t    \t  frm.add_custom_button(__(\"Print Invoice\"), function() {\n\t\t        let url = baseUrl + \"/printview?doctype=Sales%20Invoice&name=\"+frm.doc.name+\"&trigger_print=1&format=Sales%20Inv%20Group&no_letterhead=0&letterhead=logo&settings=%7B%7D&_lang=en-US\"\n                 window.open(url, '_blank');\n\t\t  })\n\t\t  \n\t\t  \n\t\t  \n\t\t    frm.add_custom_button(__(\"Insurance Invoice\"), function() {\n\t\t        let url = baseUrl + \"/printview?doctype=Sales%20Invoice&name=\"+frm.doc.name+\"&trigger_print=1&format=Insurance%20Invoice&no_letterhead=0&letterhead=logo&settings=%7B%7D&_lang=en-US\"\n                 window.open(url, '_blank');\n\t\t  })\n\t\t  \n\t\t  \n\t\t  \n\t\t\t}\n\t},\n\tdiscount_amount: function(frm){\n\t    \tfrm.set_value(\"total_and__vat\", (frm.doc.grand_total - frm.doc.discount_amount) * 1.05);\n\t}\n\n})\n \n\nfrappe.ui.form.on('Sales Invoice Item', {\n\trefresh(frm) {\n\t\t// your code here\n\t\t\n\t},\n\t item_code: function(frm, cdt, cdn) {\n         frm.set_value(\"total_and__vat\", frm.doc.grand_total * 1.05);\n\t },\n\t\tbefore_items_remove(frm){\n\t   // alert()\n\t    frm.set_value(\"total_and__vat\", frm.doc.grand_total * 1.05);\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee Receipt",
  "enabled": 1,
  "modified": "2025-09-06 13:44:30.257914",
  "module": "HIS",
  "name": "Cancel Receipt",
  "script": "frappe.ui.form.on('Employee Receipt', {\n\trefresh(frm) {\n\t\t// your code here\n       if(frm.is_new()){\n        frappe.call({\n            method: 'his.his.doctype.employee_receipt.employee_receipt.get_account',\n            callback: function(r) {\n                frm.set_value(\"paid_to\", r.message)\n                \n               \n            }\n        });\n        }\n        \n\t\tfrm.set_query(\"paid_to\", function() {\n    return {\n        \"filters\": {\n            \"account_type\": [\"in\", [\"Cash\", \"Expense Account\"]]\n        }\n    };\n});\n\n\t},\n\tcost_center: function(frm){\n\t    frappe.call({\n\t\tmethod: \"erpnext.accounts.utils.get_balance_on\",\n// \t\tmethod: \"his.get_balance.get_balance_on\",\n\t\targs: {\n\t\t    date: get_today(), \n\t\t    party_type: 'Employee', \n\t\t    party: frm.doc.employee, \n\t\t  //  cost_center: frm.doc.cost_center\n\t\t    account: \"2110 - Creditors - JSH\"\n\t\t    \n\t\t},\n\t\tcallback: function(r) {\n// \t\t\tdoc.outstanding_balance = format_currency(r.message, erpnext.get_currency(doc.company));\n            frm.set_value(\"balance\", r.message)\n            frm.set_value(\"balance_with_vat\", r.message * 1.05)\n// \t\t\trefresh_field('outstanding_balance', 'accounts');\n\t\t}\n\t\t})\n\t},\n\temployee: function(frm){\n\t    frappe.call({\n\t\tmethod: \"erpnext.accounts.utils.get_balance_on\",\n// \t\tmethod: \"his.get_balance.get_balance_on\",\n\t\targs: {\n\t\t    date: get_today(), \n\t\t    party_type: 'Employee', \n\t\t    party: frm.doc.employee, \n\t\t  //  cost_center: frm.doc.cost_center,\n\t\t    account: \"2110 - Creditors - JSH\"\n\t\t    \n\t\t},\n\t\tcallback: function(r) {\n// \t\t\tdoc.outstanding_balance = format_currency(r.message, erpnext.get_currency(doc.company));\n            frm.set_value(\"balance\", r.message)\n            frm.set_value(\"balance_with_vat\", r.message * 1.05)\n// \t\t\trefresh_field('outstanding_balance', 'accounts');\n\t\t}\n\t\t})\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Que",
  "enabled": 1,
  "modified": "2025-09-06 13:44:30.229925",
  "module": "HIS",
  "name": "Que",
  "script": "frappe.ui.form.on('Que', {\n    before_save: function(frm){\n         if (frm.is_new() && frm.doc.follow_up != 1) { \n            frm.set_value(\"que_type\", \"New Patient\");\n            frm.set_value(\"status\", \"Open\");\n        }\n    },\n\trefresh(frm) {\n\t\t// your code here\n\t\t\n       \n\tfrm.set_query(\"insurance\", function() {\n        return {\n            \"filters\": {\n               customer_group: [\"in\", [\"Insurance\", \"Sponsor\"]]\n            }\n        };\n    });\n    \n    \tfrm.set_query(\"employee\", function() {\n        return {\n            \"filters\": {\n               allow_to_bill: 1\n            }\n        };\n    });\n    \n    \n  \n\t},\n\t\tfollow_up: function(frm){\n\t    if (frm.doc.follow_up===1){\n\t         frm.set_value(\"que_type\", \"Follow Up\")\n\n\t    }\n\t      else if (frm.doc.follow_up===0){\n\t         frm.set_value(\"que_type\", \"New Patient\")\n\n\t    }\n\t   \n\t}\n\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2025-09-06 13:44:30.698544",
  "module": "HIS",
  "name": "Validate Refund",
  "script": "// frappe.ui.form.on('Sales Invoice', {\r\n//     refresh: function(frm) {\r\n//         frm.page.add_inner_button(__('Return / Credit Note'), function() {\r\n//             console.log(\"Return / Credit Note button clicked\");\r\n\r\n//             let filtered_items = [];\r\n//             frm.doc.items.forEach(function(item) {\r\n//                 console.log(\"Checking item:\", item); // Log item details\r\n//                 if (!item.has_lab_result) {  // Check if `has_lab_result` is not checked\r\n//                     filtered_items.push({\r\n//                         item_code: item.item_code,\r\n//                         qty: -Math.abs(item.qty),  // Set quantity to negative\r\n//                         rate: item.rate,\r\n//                         amount: -Math.abs(item.amount),  // Set amount to negative\r\n//                         description: item.description,\r\n//                         // Include other relevant fields here\r\n//                     });\r\n//                     console.log(\"Item added to filtered list with negative quantity:\", item); // Log added items\r\n//                 }\r\n//             });\r\n\r\n//             if (filtered_items.length > 0) {\r\n//                 console.log(\"Filtered items:\", filtered_items); // Log filtered items\r\n                \r\n//                 // Get current date and time\r\n//                 let current_datetime = frappe.datetime.now_datetime();\r\n\r\n//                 // Create a new Sales Invoice with the filtered items\r\n//                 frappe.call({\r\n//                     method: \"frappe.client.insert\",\r\n//                     args: {\r\n//                         doc: {\r\n//                             doctype: \"Sales Invoice\",\r\n//                             customer: frm.doc.customer,\r\n//                             items: filtered_items,\r\n//                             is_return: 1, // Mark as a Return/Credit Note\r\n//                             return_against: frm.doc.name, // Link to the original Sales Invoice\r\n//                             posting_date: frappe.datetime.now_date(), // Set the current date\r\n//                             posting_time: frappe.datetime.now_time(), // Set the current time\r\n//                             // Include other relevant fields here\r\n//                         }\r\n//                     },\r\n//                     callback: function(response) {\r\n//                         if (!response.exc) {\r\n//                             frappe.msgprint(__('New Return/Credit Note created.'));\r\n//                             // Redirect to the newly created Sales Invoice\r\n//                             frappe.set_route('Form', 'Sales Invoice', response.message.name);\r\n//                         }\r\n//                     }\r\n//                 });\r\n//             } else {\r\n//                 console.log(\"No items available for Return/Credit Note.\"); // Log if no items\r\n//                 frappe.msgprint(__('No items available for Return/Credit Note.'));\r\n//             }\r\n//         }, __('Create'));\r\n//     }\r\n// });\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2025-09-06 13:44:30.760766",
  "module": "HIS",
  "name": "Sales",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\n\nfrappe.ui.form.on('Sales Invoice Item', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\n\tbefore_items_remove(frm){\n\t   // alert()\n\t  \tif (frm.doc.so_type==\"Cashiers\" && frm.doc.is_return ==0){\n\t frappe.throw(__('You can not delete this item'))\n\t}\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Vital Signs",
  "enabled": 1,
  "modified": "2025-09-06 13:44:30.991683",
  "module": "HIS",
  "name": "Vital Signs",
  "script": "frappe.ui.form.on('Vital Signs', {\n    height: function(frm) {\n        calculate_bmi(frm);\n    },\n    weight: function(frm) {\n        calculate_bmi(frm);\n    }\n});\n\nfunction calculate_bmi(frm) {\n    if (frm.doc.height && frm.doc.weight) {\n        let height_in_meters = frm.doc.height;\n        let weight_in_kg = frm.doc.weight;\n\n        // Calculate BMI\n        let bmi = weight_in_kg / (height_in_meters * height_in_meters);\n        frm.set_value('bmi', bmi.toFixed(2));\n\n        // Determine weight status\n        let weight_status = '';\n        if (bmi < 18.5) {\n            weight_status = 'Underweight';\n        } else if (bmi >= 18.5 && bmi < 24.9) {\n            weight_status = 'Normal';\n        } else if (bmi >= 25 && bmi < 29.9) {\n            weight_status = 'Overweight';\n        } else {\n            weight_status = 'Obesity';\n        }\n\n        frm.set_value('weight_status', weight_status);\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Clinical Procedure",
  "enabled": 1,
  "modified": "2025-09-06 13:44:30.950502",
  "module": "HIS",
  "name": "Filters Clinical Procedure",
  "script": "frappe.ui.form.on('Clinical Procedure', {\n\trefresh(frm) {\n\t\t// your code here\n\t\t\tfrm.set_query('item_code', 'procedure_items', function() {\n\t\t\treturn {\n\t\t\t\tfilters: {\n\t\t\t\t\tis_stock_item: 1,\n\t\t\t\t\titem_group: [\"!=\", \"Optical\"]  // Use \"!=\" for \"Not equal\"\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t\t\n\t\t\tfrm.set_query('item_code', 'consumable_items', function() {\n\t\t\treturn {\n\t\t\t\tfilters: {\n\t\t\t\t\tis_stock_item: 1,\n\t\t\t\t\titem_group: [\"!=\", \"Optical\"]  // Use \"!=\" for \"Not equal\"\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Transfer Patient Balance",
  "enabled": 1,
  "modified": "2025-09-06 13:44:30.348288",
  "module": "HIS",
  "name": "Filter Party Type",
  "script": "frappe.ui.form.on('Transfer Patient Balance', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"party_type\", function() {\n            return {\n                filters: {\n                    name: [\"in\", [\"Patient\", \"Employee\", \"Customer\"]]\n                }\n            };\n        });\n        \n    // if (frm.doc.party_type == \"Employee\"){\n            \n    //  setTimeout(function() {\n    //     frm.set_query(\"party\", function() {\n    //         return {\n    //             \"filters\": {\n    //                 allow_to_bill: 1\n    //             }\n    //         };\n    //     });\n    // }, 500); // Timeout set to 500 milliseconds\n    \n    //     }\n\t},\n\t\n\t\n\t\tpatient: function(frm){\n\t    frappe.call({\n\t\tmethod: \"erpnext.accounts.utils.get_balance_on\",\n\t\targs: {date: get_today(), party_type: 'Customer', party: frm.doc.customer},\n\t\tcallback: function(r) {\n// \t\t\tdoc.outstanding_balance = format_currency(r.message, erpnext.get_currency(doc.company));\n            frm.set_value(\"patient_balance\", r.message)\n// \t\t\trefresh_field('outstanding_balance', 'accounts');\n\t\t}\n\t\t})\n\t},\n\tparty_type: function(frm){\n\t    frm.set_value(\"party\", \"\")\n\t}\n\t\n\t\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Return",
  "enabled": 1,
  "modified": "2025-09-06 13:44:30.928342",
  "module": "HIS",
  "name": "Sales Return",
  "script": "frappe.ui.form.on('Sales Return', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tfrom_date: function(frm){\n\t     var child_table_fieldname = 'items';\n\t\tvar child_table_data = frm.doc[child_table_fieldname] || [];\n\t\tfor (var i = child_table_data.length - 1; i >= 0; i--) {\n\t\t\tvar child_row = child_table_data[i];\n\t\t\tfrappe.model.clear_table(frm.doc, child_table_fieldname, child_row.name);\n\t\t}\n\t\tfrm.refresh_fields();\n\t    if (frm.doc.patient){\n\t        \n\t        frappe.call({\n                method: \"his.his.doctype.sales_return.sales_return.get_billed_items\",\n                args: {\n                    \"patient\": frm.doc.patient,\n                    \"from_date\": frm.doc.from_date,\n                    \"to_date\" : frm.doc.to_date\n                   \n                },\n                callback: function(response) {\n                    console.log(response.message);\n                    // Process fetched sales invoices and their items here\n                    frm.set_value(\"items\", response.message)\n                }\n                      \n\t        })    \n\t    }\n\t    else{\n\t        frappe.msgprint(\"Please Select Patient First\")\n\t         frm.set_value(\"from_date\",\"\")\n\t    }\n\t   \n\t}\n\t,\n\t\n\t\tto_date: function(frm){\n\t     var child_table_fieldname = 'items';\n\t\tvar child_table_data = frm.doc[child_table_fieldname] || [];\n\t\tfor (var i = child_table_data.length - 1; i >= 0; i--) {\n\t\t\tvar child_row = child_table_data[i];\n\t\t\tfrappe.model.clear_table(frm.doc, child_table_fieldname, child_row.name);\n\t\t}\n\t\tfrm.refresh_fields();\n\t    if (frm.doc.patient && frm.doc.from_date){\n\t        \n\t        frappe.call({\n                method: \"his.his.doctype.sales_return.sales_return.get_billed_items\",\n                args: {\n                    \"patient\": frm.doc.patient,\n                    \"from_date\": frm.doc.from_date,\n                    \"to_date\" : frm.doc.to_date\n                   \n                },\n                callback: function(response) {\n                    console.log(response.message);\n                    // Process fetched sales invoices and their items here\n                    frm.set_value(\"items\", response.message)\n                }\n                      \n\t        })    \n\t    }\n\t    else{\n\t        frappe.msgprint(\"Please Select Patient First\")\n\t         frm.set_value(\"from_date\",\"\")\n\t    }\n\t   \n\t}\n\t\n\t,\n\t\n\tpatient: function(frm){\n\t     var child_table_fieldname = 'items';\n\t\tvar child_table_data = frm.doc[child_table_fieldname] || [];\n\t\tfor (var i = child_table_data.length - 1; i >= 0; i--) {\n\t\t\tvar child_row = child_table_data[i];\n\t\t\tfrappe.model.clear_table(frm.doc, child_table_fieldname, child_row.name);\n\t\t}\n\t\tfrm.refresh_fields();\n\t    if (frm.doc.to_date && frm.doc.from_date){\n\t        \n\t        frappe.call({\n                method: \"his.his.doctype.sales_return.sales_return.get_billed_items\",\n                args: {\n                    \"patient\": frm.doc.patient,\n                    \"from_date\": frm.doc.from_date,\n                    \"to_date\" : frm.doc.to_date\n                   \n                },\n                callback: function(response) {\n                    console.log(response.message);\n                    // Process fetched sales invoices and their items here\n                    frm.set_value(\"items\", response.message)\n                }\n                      \n\t        })    \n\t    }\n\t   \n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payroll Entry",
  "enabled": 1,
  "modified": "2025-09-06 13:44:29.984691",
  "module": "HIS",
  "name": "payroll entry acc",
  "script": "frappe.ui.form.on('Payroll Entry', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tif(frm.is_new()){\n\t\t    frm.set_value(\"payroll_payable_account\", \"20100 - Salary Payable - JSH\")\n\t\t}\n\t\t\n\t\t\n\t},\n\t\n\t\t    \n\t\t\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee Advance",
  "enabled": 1,
  "modified": "2025-09-06 13:44:30.871906",
  "module": "HIS",
  "name": "Employee Advance",
  "script": "frappe.ui.form.on('Employee Advance', {\n    refresh(frm) {\n        // Check if the form is new\n        if (frm.is_new()) {\n            // Use setTimeout to set values after a delay of 500 milliseconds\n            setTimeout(function() {\n                frm.set_value(\"repay_unclaimed_amount_from_salary\", 1);\n                frm.set_value(\"advance_account\", \"1610 - Employee Advances - JSH\");\n            }, 500); // Delay in milliseconds (500ms = 0.5 seconds)\n        }\n    },\n    employee: function(frm){\n          // Use setTimeout to set values after a delay of 500 milliseconds\n            setTimeout(function() {\n                frm.set_value(\"repay_unclaimed_amount_from_salary\", 1);\n                frm.set_value(\"advance_account\", \"1610 - Employee Advances - JSH\");\n            }, 500); // Delay in milliseconds (500ms = 0.5 seconds)\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2025-09-06 13:44:30.812930",
  "module": "HIS",
  "name": "remove_duplicate-labtest",
  "script": "frappe.ui.form.on('Patient Encounter', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\t    before_save: function(frm) {\n        var labTestCodes = [];\n        var rowsToRemove = [];\n        if (frm.doc.lab_test_prescription) {\n        frm.doc.lab_test_prescription.forEach(function(childRow, index) {\n            if (labTestCodes.includes(childRow.lab_test_code)) {\n                // Add the duplicate row index to be removed\n                rowsToRemove.push(index);\n            } else {\n                labTestCodes.push(childRow.lab_test_code);\n            }\n        });\n\n        // Remove the duplicate rows\n        rowsToRemove.reverse().forEach(function(index) {\n            frm.doc.lab_test_prescription.splice(index, 1);\n        });\n\n        // If duplicates were found, prevent save\n        if (rowsToRemove.length > 0) {\n            // frappe.msgprint(__('Duplicate Lab Test Code(s) removed.'));\n            frappe.validated = false;\n        }\n        }\n    }\n})\n\nfrappe.ui.form.on('Lab Prescription', {\n\t lab_test_code: function(frm, cdt, cdn) {\n        var row = frappe.get_doc(cdt, cdn);\n        var duplicateCount = 0;\n\n        frm.doc.lab_test_prescription.forEach(function(childRow) {\n            if (childRow.lab_test_code === row.lab_test_code) {\n                duplicateCount++;\n            }\n        });\n\n        // Remove duplicates except for the first occurrence\n        if (duplicateCount > 1) {\n            var foundDuplicate = false;\n            frm.doc.lab_test_prescription = frm.doc.lab_test_prescription.filter(function(childRow) {\n                if (childRow.lab_test_code === row.lab_test_code) {\n                    if (!foundDuplicate) {\n                        foundDuplicate = true;\n                        return true;\n                    } else {\n                        return \"false\";\n                    }\n                }\n                return \"true\";\n            });\n        }\n\n        // Your code here\n        // Perform other operations after checking for duplicates\n    }\n\t\n})\n\nfrappe.ui.form.on('Drug Prescription', {\n\tdrug_code: function(frm, cdt, cdn) {\n        var row = frappe.get_doc(cdt, cdn);\n        var duplicateCount = 0;\n\n        frm.doc.drug_prescription.forEach(function(childRow) {\n            if (childRow.drug_code === row.drug_code) {\n                duplicateCount++;\n            }\n        });\n\n        // Remove duplicates except for the first occurrence\n        if (duplicateCount > 1) {\n            var foundDuplicate = false;\n            frm.doc.drug_prescription = frm.doc.drug_prescription.filter(function(childRow) {\n                if (childRow.drug_code === row.drug_code) {\n                    if (!foundDuplicate) {\n                        foundDuplicate = true;\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }\n                return true;\n            });\n        }\n\n        // Your code here\n        // Perform other operations after checking for duplicates\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lab Result",
  "enabled": 1,
  "modified": "2025-09-06 13:44:29.862016",
  "module": "HIS",
  "name": "Lab result",
  "script": "frappe.ui.form.on('Lab Result', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\n\nfrappe.ui.form.on('Normal Test Result', {\n    select_result: function(frm, cdt, cdn) {\n        var row = locals[cdt][cdn]  // Retrieve the document row\n        console.log(row)\n        row.result_value = row.select_result;  // Set the result_value based on select_result\n   \n\t   frm.refresh_field(\"normal_test_items\") // Refresh the normal_test_result field\n    },\n    \n    // \t-------------------flag-----------------------------------\n   result_value: function(frm, cdt, cdn) {\n    var row = locals[cdt][cdn];\n    let result = parseFloat(row.result_value);\n\n    if (isNaN(result)) {\n        console.warn(\"Invalid result_value:\", row.result_value);\n        return;\n    }\n\n    if (row.normal_range) {\n        let normal_range = row.normal_range.trim();\n\n        if (normal_range.startsWith(\"<\")) {\n            let max = parseFloat(normal_range.replace(/[^0-9.]/g, ''));\n            if (!isNaN(max) && result > max) {\n                row.flag = \"\";\n            } else {\n                row.flag = \"\";\n            }\n\n        } else if (normal_range.startsWith(\">\")) {\n            let min = parseFloat(normal_range.replace(/[^0-9.]/g, ''));\n            if (!isNaN(min) && result < min) {\n                row.flag = \"\";\n            } else {\n                row.flag = \"\";\n            }\n\n        } else if (normal_range.includes(\"-\")) {\n            let normal = normal_range.split(\"-\").map(val => val.trim());\n            let low = parseFloat(normal[0]);\n            let high = parseFloat(normal[1]);\n\n            if (!isNaN(low) && !isNaN(high)) {\n                if (result < low) {\n                    row.flag = \"L\";\n                } else if (result > high) {\n                    row.flag = \"H\";\n                } else {\n                    row.flag = \"\";\n                }\n            }\n        }\n\n        frm.refresh_field(\"normal_test_items\");\n    }\n}\n,\n    \n    \n\tbefore_normal_test_items_remove(frm){\n\t   frappe.throw(\"Delation in Lab result is not allowed Please leave tests without result!\")\n\t},\n\t\n\n\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-09-06 13:44:30.377408",
  "module": "HIS",
  "name": "Stock Entry",
  "script": "frappe.ui.form.on('Stock Entry', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tif(frm.is_new()){\n\t\t    \tfrm.set_value(\"stock_entry_type\", \"Material Issue\")\n\t\t}\n\t\n\t  if (frm.doc.expense_account && frm.doc.stock_entry_type== \"Material Issue\") {\n            // Loop through the items table to set the expense_account for each item\n            frm.doc.items.forEach(function(item) {\n                item.expense_account = frm.doc.expense_account;\n            });\n            \n            // Refresh the items table field to reflect the changes\n            frm.refresh_field('items');\n        }\n\tfrm.set_query(\"expense_account\", function() {\n        return {\n            \"filters\": {\n               account_type: \"Expense Account\"\n            }\n        };\n    });\n    \n\t}\n})\n\nfrappe.ui.form.on('Stock Entry Detail', {\n    \n       item_code: function(frm, cdt, cdn) {\n            if ( frm.doc.stock_entry_type== \"Material Issue\"){\n        var row = locals[cdt][cdn]  // Retrieve the document row\n        // console.log(row)\n        row.expense_account = frm.doc.expense_account;  // Set the result_value based on select_result\n         frm.refresh_field(\"items\") // Refresh the normal_test_result field\n    }\n    }\n    ,\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Cash Transfer",
  "enabled": 1,
  "modified": "2025-09-06 13:44:30.635662",
  "module": "HIS",
  "name": "Cash Transfer Main cash",
  "script": "frappe.ui.form.on('Cash Transfer', {\n\trefresh(frm) {\n\t\t// your code here\n\tfrm.set_query(\"from_account\", function() {\n        return {\n            \"filters\": {\n               is_main_account: 1\n            }\n        };\n    });\n    \n    frm.set_query(\"to_account\", function() {\n        return {\n            \"filters\": {\n               is_main_account: 1\n            }\n        };\n    });\n    \n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Radiology",
  "enabled": 1,
  "modified": "2025-09-06 13:44:30.577005",
  "module": "HIS",
  "name": "Radiology",
  "script": "frappe.ui.form.on('Radiology', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tif (!frm.is_new()){\n\t\t     frm.add_custom_button('Open History', () => {\n            if(frm.doc.patient){\n            frappe.call({\n\t\t\t\tmethod: \"his.api.p_history.get_history\", //dotted path to server method\n\t\t\t\targs : {\"patient\" : frm.doc.patient},\n\t\t\t\t//  args : {\"load_a\" : currdate , to_date : to_date},\n\t\t\t\tcallback: function(r) {\n\t\t\t\t\n\t\t\t\t\tvar x = window.open();\n\t\t\t\t\tx.document.open().write(r.message);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\n\t\t\t\t}})\n            }\n          });\n\t\t}\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Discount",
  "enabled": 1,
  "modified": "2025-09-06 13:44:30.517263",
  "module": "HIS",
  "name": "Patient Discount",
  "script": "frappe.ui.form.on('Patient Discount', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tpatient: function(frm){\n\t    frappe.call({\n\t\tmethod: \"erpnext.accounts.utils.get_balance_on\",\n\t\targs: {date: get_today(), party_type: 'Customer', party: frm.doc.customer},\n\t\tcallback: function(r) {\n// \t\t\tdoc.outstanding_balance = format_currency(r.message, erpnext.get_currency(doc.company));\n            frm.set_value(\"patient_balance\", r.message)\n// \t\t\trefresh_field('outstanding_balance', 'accounts');\n\t\t}\n\t\t})\n\t},\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Daily Cash Transfer",
  "enabled": 1,
  "modified": "2025-09-06 13:44:30.466814",
  "module": "HIS",
  "name": "Daily Cash Transfer",
  "script": "frappe.ui.form.on('Daily Cash Transfer', {\n\trefresh(frm) {\n\t     calculateTotaldebits(frm);\n        calculateTotalcredits(frm);\n\t    \t frm.set_query('account', 'from_account', function() {\n            return {\n                // query: \"his.api.dp_drug_pr_link_query.my_custom_query\",\n                filters: {\n                    is_main_account: 1\n                }\n                \n            };\n        })\n        \n        \n        \t frm.set_query('account', 'to_account', function() {\n            return {\n                // query: \"his.api.dp_drug_pr_link_query.my_custom_query\",\n                filters: {\n                   is_main_account: 1\n                }\n                \n            };\n        })\n\t\t// your code here\n\t}\n})\n\nfrappe.ui.form.on('Main Account Entery', {\n\t\t amount: function(frm, cdt, cdn) {\n    //  alert(\"why are you not working.\")\n        // Recalculate total units sum whenever units field changes\n        calculateTotaldebits(frm);\n        calculateTotalcredits(frm);\n    },\naccount: function(frm, cdt, cdn) {\n    var row = frappe.get_doc(cdt, cdn);\n \n    frappe.call({\n        method: \"erpnext.accounts.utils.get_balance_on\",\n        args: {\n            date: frappe.datetime.get_today(),\n            account: row.account\n        },\n        callback: function(r) {\n            if (r.message !== undefined) {\n                row.currenct_balance = r.message;\n                  frm.refresh_field('to_account'); \n                frm.refresh_field('from_account'); // Adjust 'from_account' to your specific child table field name\n            } else {\n                frappe.msgprint(__('Unable to fetch balance for the selected account.'));\n            }\n        }\n    });\n}\n})\n\n\nfunction calculateTotaldebits(frm) {\n    var total_units = 0;\n    frm.doc.from_account.forEach(function(row) {\n        total_units += row.amount;\n    });\n     frm.set_value('total_credit', total_units);\n}\n\nfunction calculateTotalcredits(frm) {\n    var total_units = 0;\n    frm.doc.to_account.forEach(function(row) {\n        total_units += row.amount;\n    });\n     frm.set_value('total_debit', total_units);\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee Discount",
  "enabled": 1,
  "modified": "2025-09-06 13:44:30.437772",
  "module": "HIS",
  "name": "Employee Discount",
  "script": "frappe.ui.form.on('Employee Discount', {\n\trefresh(frm) {\n\t\t// your code here\n\t\t\n\t\t\n\t}\n\t,\n\t\tcost_center: function(frm){\n\t    frappe.call({\n// \t\tmethod: \"erpnext.accounts.utils.get_balance_on\",\n\t\tmethod: \"erpnext.accounts.utils.get_balance_on\",\n\t\targs: {\n\t\t    date: get_today(), \n\t\t    party_type: 'Employee', \n\t\t    party: frm.doc.employee, \n\t\t    account: \"2110 - Creditors - JSH\",\n\t\t  //  cost_center: frm.doc.cost_center\n\t\t    \n\t\t},\n\t\tcallback: function(r) {\n// \t\t\tdoc.outstanding_balance = format_currency(r.message, erpnext.get_currency(doc.company));\n            frm.set_value(\"employee_balance\", r.message)\n            // frm.set_value(\"balance_with_vat\", r.message * 1.05)\n// \t\t\trefresh_field('outstanding_balance', 'accounts');\n\t\t}\n\t\t})\n\t},\n\temployee: function(frm){\n\t    frappe.call({\n// \t\tmethod: \"erpnext.accounts.utils.get_balance_on\",\n\t\tmethod: \"erpnext.accounts.utils.get_balance_on\",\n\t\targs: {\n\t\t    date: get_today(), \n\t\t    party_type: 'Employee', \n\t\t    party: frm.doc.employee, \n\t\t    account: \"2110 - Creditors - JSH\",\n\t\t  //  cost_center: frm.doc.cost_center\n\t\t    \n\t\t},\n\t\tcallback: function(r) {\n// \t\t\tdoc.outstanding_balance = format_currency(r.message, erpnext.get_currency(doc.company));\n            frm.set_value(\"employee_balance\", r.message)\n            // frm.set_value(\"balance_with_vat\", r.message * 1.05)\n// \t\t\trefresh_field('outstanding_balance', 'accounts');\n\t\t}\n\t\t})\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Journal Entry",
  "enabled": 1,
  "modified": "2025-09-06 13:44:30.167290",
  "module": "HIS",
  "name": "Checking Remarks",
  "script": "frappe.ui.form.on('Journal Entry', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n before_save: function(frm) {\n        let promises = [];\n        \n        frm.doc.accounts.forEach(row => {\n            let doctype, fieldname;\n\n            if (row.party_type == \"Employee\") {\n                doctype = \"Employee\";\n                fieldname = \"employee_name\";\n            } else if (row.party_type == \"Customer\") {\n                doctype = \"Customer\";\n                fieldname = \"customer_name\";\n            } else if (row.party_type == \"Supplier\") {\n                doctype = \"Supplier\";\n                fieldname = \"supplier_name\";\n            }\n\n            if (doctype) {\n                let promise = frappe.db.get_value(doctype, row.party, fieldname)\n                    .then(r => {\n                        if (r.message) {\n                            frappe.model.set_value(row.doctype, row.name, \"party_name\", r.message[fieldname]);\n                        }\n                    });\n                promises.push(promise);\n            }\n        });\n\n        return Promise.all(promises); // Ensures all async updates complete before saving\n    },\n\tbefore_submit: function(frm){\n\t    if (!frm.doc.user_remark){\n\t        frappe.throw(\"Please Enter User Remarks!!\")\n\t    }\n\t}\n})\n\nfrappe.ui.form.on('Journal Entry Account', {\n    party: function(frm, cdt, cdn) {\n        let row = frappe.get_doc(cdt, cdn);\n        if (row.party_type == \"Employee\") {\n            frappe.db.get_value(\"Employee\", row.party, \"employee_name\")\n                .then(r => {\n                    if (r.message) {\n                        frappe.model.set_value(cdt, cdn, \"party_name\", r.message.employee_name);\n                    }\n                });\n        }\n        \n        if (row.party_type == \"Customer\") {\n            frappe.db.get_value(\"Customer\", row.party, \"customer_name\")\n                .then(r => {\n                    if (r.message) {\n                        frappe.model.set_value(cdt, cdn, \"party_name\", r.message.customer_name);\n                    }\n                });\n        }\n          if (row.party_type == \"Supplier\") {\n            frappe.db.get_value(\"Supplier\", row.party, \"supplier_name\")\n                .then(r => {\n                    if (r.message) {\n                        frappe.model.set_value(cdt, cdn, \"party_name\", r.message.supplier_name);\n                    }\n                });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Inpatient Order",
  "enabled": 1,
  "modified": "2025-09-06 13:44:30.099816",
  "module": "HIS",
  "name": "patient Order",
  "script": "frappe.ui.form.on('Inpatient Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tif (!frm.is_new()){\n\t\t        if (!frm.is_new()) {\n\t\t\n        frm.add_custom_button(__('Print Medication'), function(){\n            var url=`${frappe.urllib.get_base_url()}/printview?doctype=Inpatient%20Order&name=${frm.doc.name}&trigger_print=1&format=Medication%20Prescription%20IPD&no_letterhead=0&letterhead=Logo&settings=%7B%7D&_lang=en-US`\n            window.open(url, '_blank');\n        }, __(\"Print\"));\n        frm.add_custom_button(__('Print Lab'), function(){\n            var url=`${frappe.urllib.get_base_url()}/printview?doctype=Inpatient%20Order&name=${frm.doc.name}&trigger_print=1&format=Lab%20Prescription%20IPD&no_letterhead=0&letterhead=Logo&settings=%7B%7D&_lang=en-US`\n            window.open(url, '_blank');\n        }, __(\"Print\"));\n        frm.add_custom_button(__('Print Procedure'), function(){\n            var url=`${frappe.urllib.get_base_url()}/printview?doctype=Inpatient%20Order&name=${frm.doc.name}&trigger_print=1&format=Procedure%20Prescription%20IPD&no_letterhead=0&letterhead=Logo&settings=%7B%7D&_lang=en-US`\n            window.open(url, '_blank');\n        }, __(\"Print\"));\n\n        frm.add_custom_button(__('Print Radiology'), function(){\n            var url=`${frappe.urllib.get_base_url()}/printview?doctype=Inpatient%20Order&name=${frm.doc.name}&trigger_print=1&format=Radiology%20Prescription%20IPD&no_letterhead=0&letterhead=Logo&settings=%7B%7D&_lang=en-US`\n            window.open(url, '_blank');\n        }, __(\"Print\"));\n        \n          frm.add_custom_button(__('Print Services'), function(){\n            var url=`${frappe.urllib.get_base_url()}/printview?doctype=Inpatient%20Order&name=${frm.doc.name}&trigger_print=1&format=Services%20Prescription%20IPD&no_letterhead=0&letterhead=Logo&settings=%7B%7D&_lang=en-US`\n            window.open(url, '_blank');\n        }, __(\"Print\"));\n    }\n    \n    \n     \n\t\t}\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Emergency",
  "enabled": 1,
  "modified": "2025-09-06 13:44:29.924822",
  "module": "HIS",
  "name": "Emergency",
  "script": "frappe.ui.form.on('Emergency', {\n    \tadd_vital_sign:function(frm){\n\t    \n\t   // frm.new_doc(\"\")\n\t     frappe.new_doc(\"Vital Signs\",{\"patient\": frm.doc.patient, }) \n\n\t},\n\tonload_post_render(frm){\n        setTimeout(() => {\n            get_history(frm.doc.patient , \"vitals\")\n            get_history(frm.doc.patient , \"labs\")\n            \n        }, 1000);\n        \n        // alert()\n    },\n\trefresh(frm) {\n\t\t// your code here\n\t\tif (!frm.is_new()){\n\t\t    frm.add_custom_button('Open History', () => {\n            if(frm.doc.patient){\n            frappe.call({\n\t\t\t\tmethod: \"his.api.p_history.get_history\", //dotted path to server method\n\t\t\t\targs : {\"patient\" : frm.doc.patient},\n\t\t\t\t//  args : {\"load_a\" : currdate , to_date : to_date},\n\t\t\t\tcallback: function(r) {\n\t\t\t\t\n\t\t\t\t\tvar x = window.open();\n\t\t\t\t\tx.document.open().write(r.message);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\n\t\t\t\t}})\n            }\n          });\n\t\t    \n\t\t      //  if (!frm.is_new()) {\n\t\t              \n\t\t\n        frm.add_custom_button(__('Print Medication'), function(){\n            var url=`${frappe.urllib.get_base_url()}/printview?doctype=Emergency&name=${frm.doc.name}&trigger_print=1&format=ER%20Medication%20Prescription&no_letterhead=0&letterhead=Logo&settings=%7B%7D&_lang=en-US`\n            window.open(url, '_blank');\n        }, __(\"Print\"));\n        frm.add_custom_button(__('Print Lab'), function(){\n            var url=`${frappe.urllib.get_base_url()}/printview?doctype=Emergency&name=${frm.doc.name}&trigger_print=1&format=ER%20Lab%20Prescription&no_letterhead=0&letterhead=Logo&settings=%7B%7D&_lang=en-US`\n            window.open(url, '_blank');\n        }, __(\"Print\"));\n        frm.add_custom_button(__('Print Procedure'), function(){\n            var url=`${frappe.urllib.get_base_url()}/printview?doctype=Emergency&name=${frm.doc.name}&trigger_print=1&format=ER%20Procedure%20Prescription&no_letterhead=0&letterhead=Logo&settings=%7B%7D&_lang=en-US`\n            window.open(url, '_blank');\n        }, __(\"Print\"));\n\n        frm.add_custom_button(__('Print Radiology'), function(){\n            var url=`${frappe.urllib.get_base_url()}/printview?doctype=Emergency&name=${frm.doc.name}&trigger_print=1&format=ER%20Radiology%20Prescription&no_letterhead=0&letterhead=Logo&settings=%7B%7D&_lang=en-US`\n            window.open(url, '_blank');\n        }, __(\"Print\"));\n        \n          frm.add_custom_button(__('Print Services'), function(){\n            var url=`${frappe.urllib.get_base_url()}/printview?doctype=Emergency&name=${frm.doc.name}&trigger_print=1&format=ER%20Services%20Prescription&no_letterhead=0&letterhead=Logo&settings=%7B%7D&_lang=en-US`\n            window.open(url, '_blank');\n        }, __(\"Print\"));\n    }\n    \n    \n     \n// \t\t}\n\t}\n})",
  "view": "Form"
 }
]